{"version":3,"sources":["components/loggedInComponents/allHistory.tsx"],"names":["history_data","historyComment","hc_data","allHistory","props","_this","Object","E_Phoenix_ebpsfdf_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_super","call","myGrid","React","createRef","datafield","name","type","columns","text","dataField","cellsalign","align","filtertype","width","state","dataChanged","historyData","userTypeMaster","JSON","parse","getLocalStorage","LSKey","USER_TYPE_ALL","setState","getMultipleFormDataByUrl","api","allhistory","objName","form","data","prevProps","prevState","getUserTypeNepali","userType","userTypeObject","find","uT","designation","getUserTypeValueNepali","prevData","assign","map","row","E_Phoenix_ebpsfdf_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","status","getUserStatusNepali","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","react_helmet__WEBPACK_IMPORTED_MODULE_16___default","errors","_shared_ErrorDisplay__WEBPACK_IMPORTED_MODULE_14__","message","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","as","dividing","getMessage","concat","hist","_Grid_RootGrid__WEBPACK_IMPORTED_MODULE_15__","localdata","groupable","showfilterrow","_shared_FallbackComponent__WEBPACK_IMPORTED_MODULE_8__","loading","PureComponent","mapDispatchToProps","postFormDataByUrl","connect","root","formData","ui","success"],"mappings":"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","file":"static/js/21.0fa19e71.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { getUserTypeValueNepali, getUserStatusNepali } from '../../utils/functionUtils';\r\nimport FallbackComponent from '../shared/FallbackComponent';\r\nimport { historyComment } from '../../utils/data/headFootLangFile';\r\nimport { getMessage } from '../shared/getMessage';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { postFormDataByUrl, getMultipleFormDataByUrl } from '../../store/actions/formActions';\r\nimport api from '../../utils/api';\r\nimport ErrorDisplay from '../shared/ErrorDisplay';\r\n// import RootGrid from \"./Grid/RootGrid\";\r\nimport JqxGrid, { IGridProps } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\r\nimport RootGrid from './Grid/RootGrid';\r\nimport Helmet from 'react-helmet';\r\nimport { getLocalStorage } from '../../utils/secureLS';\r\nimport { LSKey } from '../../utils/enums/localStorageKeys';\r\nimport { UserTypeMaster, UserType } from '../../utils/userTypeUtils';\r\n\r\nconst history_data = historyComment.hc_data;\r\nconst messageId = 'historyComment.hc_data';\r\n\r\ninterface HistoryState {\r\n\tdataChanged: boolean;\r\n\thistoryData: object;\r\n\tuserTypeMaster: UserTypeMaster[];\r\n}\r\n\r\nclass allHistory extends React.PureComponent<{}, IGridProps & HistoryState> {\r\n\tconstructor(props: {}) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdataChanged: false,\r\n\t\t\thistoryData: [],\r\n\t\t\tuserTypeMaster: [],\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst userTypeMaster = JSON.parse(getLocalStorage(LSKey.USER_TYPE_ALL));\r\n\t\tthis.setState({ userTypeMaster });\r\n\t\t//@ts-ignore\r\n\t\tthis.props.getMultipleFormDataByUrl([{ api: api.allhistory, objName: 'allHistory', form: true }], (data) => data);\r\n\t}\r\n\r\n\t//@ts-ignore\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { userTypeMaster } = this.state;\r\n\r\n\t\tconst getUserTypeNepali = (userType: UserType) => {\r\n\t\t\tconst userTypeObject = userTypeMaster.find((uT) => uT.userType === userType);\r\n\t\t\tif (userTypeObject) {\r\n\t\t\t\treturn userTypeObject.designation;\r\n\t\t\t} else {\r\n\t\t\t\tgetUserTypeValueNepali(userType);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//@ts-ignore\r\n\t\tif (this.props.prevData !== prevProps.prevData) {\r\n\t\t\tthis.setState({\r\n\t\t\t\thistoryData: Object.assign(\r\n\t\t\t\t\t[],\r\n\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\tthis.props.prevData.map((row) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...row,\r\n\t\t\t\t\t\t\tstatus: getUserStatusNepali(row.status),\r\n\t\t\t\t\t\t\tuserType: getUserTypeNepali(row.userType),\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t})\r\n\t\t\t\t),\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t//@ts-ignore\r\n\tprivate myGrid = React.createRef<JqxGrid>();\r\n\r\n\tdatafield = [\r\n\t\t{ name: 'name', type: 'string' },\r\n\t\t{ name: 'actionDate', type: 'string' },\r\n\t\t{ name: 'actionTime', type: 'string' },\r\n\t\t{ name: 'status', type: 'string' },\r\n\t\t{ name: 'userType', type: 'string' },\r\n\t\t{ name: 'enterBy', type: 'string' },\r\n\t];\r\n\r\n\tcolumns = [\r\n\t\t{\r\n\t\t\ttext: 'फारम नाम',\r\n\t\t\tdataField: 'name',\r\n\t\t\t// width: '350',\r\n\t\t\tcellsalign: 'center',\r\n\t\t\talign: 'center',\r\n\t\t\tfiltertype: 'list',\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'मिति',\r\n\t\t\tdatafield: 'actionDate',\r\n\t\t\twidth: '100',\r\n\t\t\tcellsalign: 'center',\r\n\t\t\talign: 'center',\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'समय',\r\n\t\t\tdatafield: 'actionTime',\r\n\t\t\twidth: '90',\r\n\t\t\tcellsalign: 'center',\r\n\t\t\talign: 'center',\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'स्थिति',\r\n\t\t\tdatafield: 'status',\r\n\t\t\tcellsalign: 'center',\r\n\t\t\talign: 'center',\r\n\t\t\twidth: '150',\r\n\t\t\tfiltertype: 'list',\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'प्रयोगकर्ताको प्रकार',\r\n\t\t\tdatafield: 'userType',\r\n\t\t\twidth: '130',\r\n\t\t\tcellsalign: 'center',\r\n\t\t\talign: 'center',\r\n\t\t\tfiltertype: 'list',\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: 'प्रयोगकर्ताको नाम',\r\n\t\t\tdatafield: 'enterBy',\r\n\t\t\twidth: '180',\r\n\t\t\tcellsalign: 'center',\r\n\t\t\talign: 'center',\r\n\t\t},\r\n\r\n\t\t// {\r\n\t\t//   text: getMessage(`${messageId}.date`, history_data.date),\r\n\t\t//   datafield: 'actionDate'\r\n\t\t// },\r\n\t\t// {\r\n\t\t//   text: getMessage(`${messageId}.time`, history_data.time),\r\n\t\t//   datafield: 'actionTime'\r\n\t\t// },\r\n\t\t// {\r\n\t\t//   text: getMessage(`${messageId}.status`, history_data.status),\r\n\t\t//   datafield: 'status'\r\n\t\t// },\r\n\t\t// {\r\n\t\t//   text: getMessage(`${messageId}.user`, history_data.user),\r\n\t\t//   datafield: 'userType'\r\n\t\t// }\r\n\t];\r\n\r\n\trender() {\r\n\t\t//@ts-ignore\r\n\t\tif (this.props.prevData) {\r\n\t\t\t//@ts-ignore\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"view-Form\">\r\n\t\t\t\t\t<Helmet>\r\n\t\t\t\t\t\t<title>All History</title>\r\n\t\t\t\t\t</Helmet>\r\n\t\t\t\t\t{/* \r\n          //@ts-ignore */}\r\n\t\t\t\t\t{this.props.errors && (\r\n\t\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\t\t<ErrorDisplay message={this.props.errors.message} />\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<Header as=\"h3\" dividing>\r\n\t\t\t\t\t\t{getMessage(`${messageId}.hist`, history_data.hist)}\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t\t{/* \r\n          //@ts-ignore */}\r\n\t\t\t\t\t<RootGrid\r\n\t\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\t\tlocaldata={this.state.historyData}\r\n\t\t\t\t\t\tdatafield={this.datafield}\r\n\t\t\t\t\t\tcolumns={this.columns}\r\n\t\t\t\t\t\tgroupable={false}\r\n\t\t\t\t\t\tshowfilterrow={true}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<FallbackComponent\r\n\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\tloading={this.props.loading}\r\n\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\terrors={this.props.errors}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//@ts-ignore\r\nconst mapStateToProps = (state) => ({\r\n\tprevData: state.root.formData.allHistory,\r\n\tloading: state.root.ui.loading,\r\n\terrors: state.root.ui.errors,\r\n\tsuccess: state.root.formData.success,\r\n});\r\nconst mapDispatchToProps = { getMultipleFormDataByUrl, postFormDataByUrl };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(allHistory);\r\n"],"sourceRoot":""}